<?php

namespace DummyNamespace;

use NamespacedDummyUserModel;
use NamespacedDummyModel;
use Illuminate\Auth\Access\HandlesAuthorization;

class DummyClass
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any DocDummyPluralModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @return mixed
     */
    public function viewAny(DummyUser $user)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission) || $user->can('user::view:all');
    }

    /**
     * Determine whether the user can view the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function view(DummyUser $user, DummyModel $dummyModel)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        $viewAny = $this->viewAny($user);

        if (!is_null($viewAny)) {
            return $viewAny;
        }

        return $user->id === $dummyModel->id || has_permission($user, $permission);;
    }

    /**
     * Determine whether the user can create DocDummyPluralModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @return mixed
     */
    public function create(DummyUser $user)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission);
    }

    /**
     * Determine whether the user can update the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function update(DummyUser $user, DummyModel $dummyModel)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission);
    }

    /**
     * Determine whether the user can delete the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function delete(DummyUser $user, DummyModel $dummyModel)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission);
    }

    /**
     * Determine whether the user can restore the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function restore(DummyUser $user, DummyModel $dummyModel)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission);
    }

    /**
     * Determine whether the user can permanently delete the DocDummyModel.
     *
     * @param  \NamespacedDummyUserModel  $user
     * @param  \NamespacedDummyModel  $dummyModel
     * @return mixed
     */
    public function forceDelete(DummyUser $user, DummyModel $dummyModel)
    {
        $permission = sprintf("%s DummyModelPlural", __FUNCTION__);

        return has_permission($user, $permission);
    }
}
